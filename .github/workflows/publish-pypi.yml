name: Publish to PyPI

on:
  workflow_dispatch:  # 수동으로 실행할 수 있게 하는 트리거 (버튼 방식)
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'none'
        type: choice
        options:
        - none    # 현재 버전 그대로 배포 (첫 배포용)
        - patch
        - minor
        - major

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리를 가져와서 버전 관리에 사용

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine bump2version

    - name: Install project dependencies
      run: |
        pip install -e .

    - name: Install dev dependencies for testing
      run: |
        pip install pytest pytest-cov

    - name: Setup virtual display for GUI libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Run tests
      env:
        DISPLAY: :99
      run: |
        python -m pytest tests/ -v || echo "No tests found, skipping..."

    - name: Get current version
      id: get_current_version
      run: |
        CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Bump version
      if: github.event.inputs.version_bump != 'none'
      run: |
        # pyproject.toml의 버전을 업데이트 (none이 아닐 때만)
        bump2version ${{ github.event.inputs.version_bump }}

    - name: Get version for deployment
      id: get_version
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build package
      run: |
        python -m build

    - name: Check build
      run: |
        python -m twine check dist/*

    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository testpypi dist/*

    - name: Test install from Test PyPI
      env:
        DISPLAY: :99  # GUI 라이브러리를 위한 디스플레이 환경변수 설정
      run: |
        # 새로운 환경에서 테스트 설치
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ qufe==${{ steps.get_version.outputs.version }}
        python -c "import qufe; print('qufe version:', qufe.__version__)"

    - name: Publish to PyPI
      if: success()
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*

    - name: Commit version bump
      if: success() && github.event.inputs.version_bump != 'none'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Bump version to ${{ steps.get_version.outputs.version }}" || exit 0
        git push

    - name: Create GitHub Release
      if: success()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: |
          Release version ${{ steps.get_version.outputs.version }}
          
          ${{ github.event.inputs.version_bump == 'none' && 'Initial release' || format('Changes in this version: Version bump ({0})', github.event.inputs.version_bump) }}
        draft: false
        prerelease: false